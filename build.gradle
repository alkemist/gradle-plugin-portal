buildscript {
  repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    mavenCentral()
  }
  dependencies {
    classpath "org.ratpack-framework.netty:ratpack-gradle:0.7.0-SNAPSHOT"
  }
}

apply plugin: "ratpack"
apply plugin: "envjs"

repositories {
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  mavenCentral()
  maven { url "http://repo.springsource.org/repo" }
  javaScript.gradle()
}

mainClassName = "bootstrap.Main"

apply plugin: "idea"
idea {
    project {
        jdkName "1.7"
        languageLevel "1.7"
    }
}

configurations {
    jstestdriver
}

dependencies {
    springloaded "org.springsource.springloaded:springloaded-core:1.1.1"
    compile "org.apache.shiro:shiro-core:1.2.1"

    compile "com.h2database:h2:1.3.168"
    compile "org.apache.jena:jena-sdb:1.3.5", {
        exclude module: "slf4j-simple"
    }

    compile "com.google.code.gson:gson:2.2.2"
}


javaScript{
    // We have to patch env.js to work with require.js
    envJs.js = files("src/test/js/harness/test-lib/env.rhino.1.2.js")
}

import org.gradle.plugins.javascript.envjs.browser.*
task jsTest
file("src/test/js/groups").eachDir { File srcDir ->
    def groupName = srcDir.name

    def junitDir = file("$buildDir/test/js/$groupName-junit")

    def prepTask = task("jsTest${groupName.capitalize()}Prepare", type: Sync) {
        into file("$buildDir/test/js/$groupName")
        into "tests", { from srcDir }
        into "js", {
            from file("$run.workingDir/public/js")

            // We have to patch require.js to work with env.js
            eachFile {
                if (it.file.name == "require.js") {
                    it.filter org.apache.tools.ant.filters.ConcatFilter,
                            append: file("src/test/js/harness/test-lib/require.load.patch.js")
                }
            }
        }
        from "src/test/js/harness", {
            eachFile {
                if (it.file.name == "driver.js") {
                    it.expand \
                        tests: srcDir.list().findAll { it.endsWith(".js") }.collect { "tests/$it" },
                        junitDirPath: junitDir.absolutePath
                }
            }
        }
        doFirst {
            delete junitDir
        }
    }

    def outputDir = reporting.file("js-test/$groupName")
    def testTask = task("jsTest${groupName.capitalize()}", type: BrowserEvaluate, dependsOn: prepTask) {
        onlyIf { !fileTree("$content/tests").empty }
        content prepTask.destinationDir
        resource "tests.html"
        result "$outputDir/test-result.html"

        doLast {
            def spec = copy {
                into outputDir
                from content
            }

            def resultFile = file(result)
            def driverFile = file("$spec.destinationDir/$resource")
            if (!resultFile.text.contains('0 failures')) {
                throw new GradleException("There are failing tests.\nSee: ${new org.gradle.logging.ConsoleRenderer().asClickableFileUrl(driverFile)}")
            }
        }
    }

    jsTest.dependsOn testTask
}

task wrapper(type: Wrapper) {
  gradleVersion = "1.4"
}
